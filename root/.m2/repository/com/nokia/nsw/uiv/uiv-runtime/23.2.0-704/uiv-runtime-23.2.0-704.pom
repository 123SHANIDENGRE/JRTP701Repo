<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>uiv-runtime</artifactId>
    <version>23.2.0-704</version>
    <packaging>jar</packaging>
    <parent>
        <groupId>com.nokia.nsw.uiv</groupId>
        <artifactId>uiv-parent</artifactId>
        <version>23.2.0-704</version>
    </parent>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<!--        <docker.image.prefix>uiv-docker-inprogress.repo.cci.nokia.net</docker.image.prefix>-->
        <docker.image.name>uiv-base</docker.image.name>
        <docker.image.tag>${project.version}</docker.image.tag>
        <maven.dependency.plugin.version>3.1.1</maven.dependency.plugin.version>
        <dockerfile-maven.version>1.4.10</dockerfile-maven.version>
        <jar.name>${project.build.finalName}.jar</jar.name>
        <startup.jar.name>uiv-startup-${project.version}.jar</startup.jar.name>
        <docker.runtime.jms>256m</docker.runtime.jms>
        <docker.runtime.jmx>1024m</docker.runtime.jmx>
        <java.version>11</java.version>
        <swagger2markup.version>1.2.0</swagger2markup.version>
	<jackson.version>2.15.2</jackson.version>
	<jackson.databind.version>2.15.2</jackson.databind.version> <!-- temp, for security vulnerability -->
	 <log4j.version>2.20.0</log4j.version>
	 <slf4j.version>1.7.26</slf4j.version>	 
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-core</artifactId>
            <version>23.2.0-704</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.databind.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <!--dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.13</version>
        </dependency-->

        <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant</artifactId>
            <version>1.10.12</version>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>32.0.0-jre</version>
        </dependency>

        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.5</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.21</version>
        </dependency>


        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.15.3</version>
        </dependency>

       <!--   <dependency>
            <groupId>io.projectreactor.netty</groupId>
            <artifactId>reactor-netty</artifactId>
            <version>1.0.15</version>
        </dependency> -->

        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>4.0.0-rc-2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>1.11.1</version>
        </dependency>

        <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-config</artifactId>
            <version>23.2.0-704</version>
        </dependency>
        <!--dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-traversal</artifactId>
            <version>23.2.0-704</version>
<exclusions>
                <exclusion>
                    <groupId>org.apache.lucene</groupId>
                    <artifactId>lucene-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency-->
        <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-maven-plugin</artifactId>
            <version>23.2.0-704</version>
        </dependency>
        <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-swagger-ui</artifactId>
            <version>23.2.0-704</version>
    </dependency>
    <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-maven-integration</artifactId>
            <version>23.2.0-704</version>
        </dependency>

        <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-neo4j-event-processor-framework</artifactId>
            <version>23.2.0-704</version>
        </dependency>
		
		 <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-rda-initial-load-processor</artifactId>
            <version>23.2.0-704</version>
        </dependency>
		
	
<dependency>
    <groupId>io.netty</groupId>
    <artifactId>netty-codec</artifactId>
    <version>4.1.86.Final</version>
</dependency>



<dependency>
    <groupId>io.netty</groupId>
    <artifactId>netty-codec-haproxy</artifactId>
    <version>4.1.86.Final</version>
</dependency>
<dependency>
    <groupId>io.netty</groupId>
    <artifactId>netty-codec-http</artifactId>
    <version>4.1.86.Final</version>
</dependency>

        <dependency>
          <groupId>net.minidev</groupId>
          <artifactId>json-smart</artifactId>
          <version>2.4.10</version>
         </dependency>


		<!-- RDA  -->		
		<!--dependency>
		    <groupId>com.nokia.nsw.uiv</groupId>
	        <artifactId>uiv-event-adapter-archetype</artifactId>
	        <version>23.2.0-704</version>
		</dependency>
		<dependency>
        	<groupId>com.nokia.nsw.uiv</groupId>
			<artifactId>uiv-floe-adapter-archetype</artifactId>
			<version>23.2.0-704</version>
		</dependency>
		<dependency>
			<groupId>com.nokia.nsw.uiv</groupId>
			<artifactId>uiv-rda-archetype</artifactId>
			<version>23.2.0-704</version>
		</dependency-->
        <!-- Test -->
<!--        <dependency>-->
<!--            <groupId>com.nokia.nsw.uiv</groupId>-->
<!--            <artifactId>uiv-model-common</artifactId>-->
<!--            <version>23.2.0-704</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.tukaani</groupId>
            <artifactId>xz</artifactId>
            <version>1.9</version>
        </dependency>
        <dependency>
            <groupId>com.thoughtworks.xstream</groupId>
            <artifactId>xstream</artifactId>
            <version>1.4.20</version>
        </dependency>
        <dependency>
			<groupId>com.nokia.nsw.uiv.uam</groupId>
			<artifactId>uiv-uam</artifactId>
			<version>23.2.0-704</version>
		</dependency>
		<dependency>
			<groupId>com.nokia.nsw.uiv</groupId>
			<artifactId>uiv-rda-core</artifactId>
			<version>23.2.0-704</version>
			<exclusions>
				<exclusion>
					<groupId>org.apache.ignite</groupId>
					<artifactId>ignite-log4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.logging.log4j</groupId>
					<artifactId>log4j-1.2-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-staticdocs</artifactId>
            <version>2.6.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-mockmvc</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-jsonSchema</artifactId>
            <version>${jackson.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.github.robwin</groupId>
            <artifactId>assertj-swagger</artifactId>
            <version>0.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup-spring-restdocs-ext</artifactId>
            <version>${swagger2markup.version}</version>
            <scope>test</scope>
        </dependency>

   <dependency>
        <groupId>com.nokia.nsw.uiv</groupId>
        <artifactId>uiv-history</artifactId>
        <version>23.2.0-704</version>
    </dependency> 

     <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-async-framework</artifactId>
            <version>23.2.0-704</version>
        </dependency>

	<dependency>			
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-number-management-framework</artifactId>
            <version>23.2.0-704</version>
	    <exclusions>
                <exclusion>
			<groupId>com.nokia.nsw.uiv</groupId>
			<artifactId>uiv-model-common</artifactId>
                </exclusion>
            </exclusions>
    </dependency>
	    <!--dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-federation-adapter-invoker</artifactId>
            <version>23.2.0-704</version>
    </dependency-->
    	<!--not used by RDA now-->
		<dependency>
			<groupId>com.nokia.nsw.uiv</groupId>
			<artifactId>uiv-rda-datalake-processor</artifactId>
			<version>23.2.0-704</version>
		</dependency>
	 <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
	<artifactId>uiv-model-common</artifactId>
	<version>23.2.0-704</version>
	<scope>test</scope>
    </dependency>
    <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.version}</version>
        </dependency>
		
		<dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-1.2-api</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <!-- slf4j bridge to log4j -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j.version}</version>
        </dependency>
    	<dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-jul</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
    		<groupId>org.slf4j</groupId>
    		<artifactId>slf4j-ext</artifactId>
    		<version>${slf4j.version}</version>
		</dependency>
		<dependency>
    		<groupId>org.slf4j</groupId>
    		<artifactId>slf4j-api</artifactId>
    		<version>${slf4j.version}</version>
		</dependency>
		<dependency>
    		<groupId>org.slf4j</groupId>
    		<artifactId>jcl-over-slf4j</artifactId>
    		<version>${slf4j.version}</version>
		</dependency>
		<dependency>
    		<groupId>org.slf4j</groupId>
    		<artifactId>jul-to-slf4j</artifactId>
    		<version>${slf4j.version}</version>
		</dependency>
		<!--uiv-sri-migration : moved to solution repo -->
        <!--
		<dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-sri-migration</artifactId>
            <version>${project.version}</version>
        </dependency>
		-->
		<!--to be used by Ignite-2.7.6 -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.197</version>
	    </dependency>        
            <dependency>
		        <groupId>com.fasterxml.woodstox</groupId>
			<artifactId>woodstox-core</artifactId>
			<version>6.5.1</version>
            </dependency>			

        <dependency>
            <groupId>com.nokia.nsw.uiv</groupId>
            <artifactId>uiv-notif</artifactId>
            <version>23.2.0-704</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>jakarta.el</artifactId>
            <version>5.0.0-M1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- springboot2 maven plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-maven-plugin</artifactId>
		<version>2.2.10.RELEASE</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>true</executable>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <outputDirectory>${basedir}/target/scripts/
                            </outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/main/resources/scripts/</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-applicationprops</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite>
                            <outputDirectory>${project.basedir}/target/classes</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/resources</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>application.properties</include>
                                        <include>index.adoc</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <profiles>
        <profile>
            <id>release-sdk</id>
            <build>
                <plugins>
                    <!-- dependencies copy -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.1.1</version>
                        <executions>
                            <execution>
                                <id>copy-dependencies</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/libs</outputDirectory>
                                    <overWriteReleases>false</overWriteReleases>
                                    <overWriteSnapshots>false</overWriteSnapshots>
                                    <overWriteIfNewer>true</overWriteIfNewer>
                                    <includeGroupIds>com.nokia.nsw.uiv,com.nokia.ckaf,com.nokia.oss.sure,com.tailf,io.confluent,nl.jworks.markdown_to_asciidoc,ch.netzwerg</includeGroupIds>
                                    <copyPom>true</copyPom>
                                </configuration>
			</execution>
			 <!--execution>
                                <id>unpack</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
					<artifactItem>
						<groupId>io.confluent</groupId>	
						<artifactId>kafka-schema-registry-parent</artifactId>
						<version>4.0.0</version>
						<type>pom</type>
						<overWrite>false</overWrite>
						<outputDirectory>${project.build.directory}/libs</outputDirectory>
					</artifactItem>
										
                                    </artifactItems>
                                    <overWriteReleases>false</overWriteReleases>
                                    <overWriteSnapshots>false</overWriteSnapshots>
                                </configuration>
                            </execution-->

                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker-generate</id>
            <build>
                <plugins>
					<!-- Copying dependencies -->
					<plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.1.1</version>
                        <executions>
                            <execution>
								<id>unpack-xsds</id>
								<phase>package</phase>
								<goals>
									<goal>unpack</goal>									
								</goals>
								<configuration>
									<!-- Add artifactItem as needed, these would be packaged in the 
										docker -->
									<artifactItems>
										<!-- Resources from framework :: Start -->
										<artifactItem>
											<groupId>com.nokia.nsw.uiv</groupId>
											<artifactId>uiv-rda-common</artifactId>
											<version>${project.version}</version>
											<type>jar</type>
											<overWrite>false</overWrite>
											<outputDirectory>${project.basedir}/target/docker/uiv-lib</outputDirectory>
											<includes>*.xsd</includes>
										</artifactItem>
										<artifactItem>
											<groupId>com.nokia.oss.sure</groupId>
											<artifactId>uiv-floe-adapter-framework</artifactId>
											<version>${project.version}</version>
											<type>jar</type>
											<overWrite>false</overWrite>
											<outputDirectory>${project.basedir}/target/docker/uiv-lib</outputDirectory>
											<includes>*.xsd</includes>
										</artifactItem>
										<artifactItem>
											<groupId>com.nokia.nsw.uiv</groupId>
											<artifactId>uiv-adapter-transformation-core</artifactId>
											<version>${project.version}</version>
											<type>jar</type>
											<overWrite>false</overWrite>
											<outputDirectory>${project.basedir}/target/docker/uiv-lib</outputDirectory>
											<includes>*.xsd</includes>
										</artifactItem>										
										<artifactItem>
											<groupId>com.nokia.nsw.uiv</groupId>
											<artifactId>ImportInventory</artifactId>
											<version>${project.version}</version>
											<classifier>config</classifier>
											<type>jar</type>
											<overWrite>true</overWrite>
											<outputDirectory>${project.basedir}/target/docker</outputDirectory>
											<includes>adapter/**</includes>
										</artifactItem>
										<!-- Resources from framework :: End -->
									</artifactItems>									
									<overWriteReleases>false</overWriteReleases>
									<overWriteSnapshots>false</overWriteSnapshots>
								</configuration>
							</execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>copy-dockerfile</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.basedir}/target/docker</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/resources</directory>
                                            <filtering>true</filtering>
                                            <includes>
                                                <include>Dockerfile</include>
                                                <include>init.sh</include>
                                                <include>installconf</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-jar</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.basedir}/target/docker</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/target</directory>
                                            <filtering>false</filtering>
                                            <includes>
                                                <include>${project.build.finalName}.jar</include>
                                            </includes>
                                        </resource>
                                        <resource>
                                            <directory>../uiv-startup/target</directory>
                                            <filtering>false</filtering>
                                            <includes>
                                                <include>${startup.jar.name}</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <!--execution>
                                <id>copy-helm</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.basedir}/target/helm</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/resources/helm</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution-->
                        </executions>
                    </plugin>
                    <!--plugin>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.6.0</version>
						<groupId>org.codehaus.mojo</groupId>
						<executions>
							<execution>
								<id>Packaging minio client into base docker</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<workingDirectory>${project.basedir}/target/docker/bin</workingDirectory>
									<executable>wget</executable>
									<arguments>
										<argument>https://repo3.cci.nokia.net/minio-io/client/mc/release/linux-amd64/mc</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin-->
			<plugin>
  			<groupId>com.googlecode.maven-download-plugin</groupId>
  			<artifactId>download-maven-plugin</artifactId>
  			<version>1.6.0</version>
  			<executions>
    				<execution>
					<id>Download Minio client</id>
      					<phase>package</phase>
      					<goals>
        					<goal>wget</goal>
      					</goals>
      					<configuration>
        					<url>https://repo.cci.nokia.net/artifactory/uiv-generic-releases/minio-io/client/mc/release/linux-amd64/mc.RELEASE.2023-03-23T20-03-04Z</url>
                            <outputFileName>mc</outputFileName>
                            <outputDirectory>${project.basedir}/target/docker/bin</outputDirectory>
      					</configuration>
    				</execution>
  			</executions>
		   </plugin>

                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <version>${dockerfile-maven.version}</version>
                        <executions>
                            <execution>
				    <id>base-docker</id>
				    	<phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <contextDirectory>${project.basedir}/target/docker</contextDirectory>
                            <dockerfile>${project.basedir}/target/docker/Dockerfile</dockerfile>
                            <repository>${docker.image.prefix}/${docker.image.name}</repository>
                            <tag>${docker.image.tag}</tag>
                            <skipDockerInfo>true</skipDockerInfo>
                            <writeTestMetadata>false</writeTestMetadata>
                            <build>
                                <noCache>true</noCache>
                            </build>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <groupId>org.codehaus.mojo</groupId>
                        <executions>
                            <execution>
                                <id>Packaging the docker image in a tar</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <commandlineArgs>save -o
                                        ${project.basedir}${file.separator}target${file.separator}docker${file.separator}${docker.image.name}-${docker.image.tag}.tar
                                        ${docker.image.prefix}/${docker.image.name}:${docker.image.tag}
                                    </commandlineArgs>

                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                 </plugins>
            </build>
        </profile>
		    <profile>
            <id>docgen-html</id>
            <activation>
                <property><name>!skipTests</name></property>
            </activation>
            <properties>
                <swagger2markup.version>1.2.0</swagger2markup.version>
                <jackson.version>2.15.2</jackson.version>
                <asciidoctor.input.directory>${project.basedir}/src/test/resources</asciidoctor.input.directory>

                <swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>
                <swagger.snippetOutput.dir>${project.build.directory}/asciidoc/snippets</swagger.snippetOutput.dir>
                <generated.asciidoc.directory>${project.build.directory}/asciidoc/generated</generated.asciidoc.directory>
                <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
                <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>

                <swagger.input>${swagger.output.dir}/swagger.json</swagger.input>

                <springfox.version>2.9.2</springfox.version>

                <maven.test.skip>false</maven.test.skip>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>${maven.compiler.version}</version>
                        <configuration>
                            <compilerVersion>${java.version}</compilerVersion>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <encoding>UTF-8</encoding>
                            <!-- prevents endPosTable exception for maven compile -->
                            <useIncrementalCompilation>false</useIncrementalCompilation>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <io.springfox.staticdocs.outputDir>${swagger.output.dir}</io.springfox.staticdocs.outputDir>
                                <io.springfox.staticdocs.snippetsOutputDir>${swagger.snippetOutput.dir}</io.springfox.staticdocs.snippetsOutputDir>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>

                    <!-- First, use the swagger2markup plugin to generate asciidoc -->
                    <plugin>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-maven-plugin</artifactId>
                        <version>${swagger2markup.version}</version>
						
                        <configuration>
                            <swaggerInput>${swagger.input}</swaggerInput>
                            <outputDir>${generated.asciidoc.directory}</outputDir>
                            <config>
                                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>

                                <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
                                <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
                                <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
                                <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security/</swagger2markup.extensions.dynamicSecurity.contentPath>

                                <swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}</swagger2markup.extensions.springRestDocs.snippetBaseUri>
                                <swagger2markup.extensions.springRestDocs.defaultSnippets>true</swagger2markup.extensions.springRestDocs.defaultSnippets>
                            </config>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>convertSwagger2markup</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Run the generated asciidoc through Asciidoctor to generate
                         other documentation types, such as PDFs or HTML5 -->
                    <plugin>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctor-maven-plugin</artifactId>
                        <version>2.1.0</version>
                        <!-- Include Asciidoctor PDF for pdf generation -->
                        
                        <!-- Configure generic document generation settings -->
                        <configuration>
                            <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                            <sourceDocumentName>index.adoc</sourceDocumentName>
                            <attributes>
                                <doctype>book</doctype>
                                <toc>left</toc>
                                <toclevels>3</toclevels>
                                <numbered></numbered>
                                <hardbreaks></hardbreaks>
                                <sectlinks></sectlinks>
                                <sectanchors></sectanchors>
                                <generated>${generated.asciidoc.directory}</generated>
                            </attributes>
                        </configuration>
                        <!-- Since each execution can only handle one backend, run
                             separate executions for each desired output type -->
                        <executions>
                            <execution>
                                <id>output-html</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>process-asciidoc</goal>
                                </goals>
                                <configuration>
                                    <backend>html5</backend>
                                    <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                                </configuration>
                            </execution>


                        </executions>
                    </plugin>
                    <!-- copy dependencies to the lib directory -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.1.1</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- copy the generated documents -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${asciidoctor.html.output.directory}</directory>
                                        </resource>
                                        <resource>
                                            <directory>${asciidoctor.pdf.output.directory}</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

        </profile>
		<profile>
            <id>docgen-pdf</id>
			<activation>
                <property><name>!skipTests</name></property>
            </activation>
            <properties>
                <swagger2markup.version>1.2.0</swagger2markup.version>
                <jackson.version>2.15.2</jackson.version>
                <asciidoctor.input.directory>${project.basedir}/src/test/resources</asciidoctor.input.directory>

                <swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>
                <swagger.snippetOutput.dir>${project.build.directory}/asciidoc/snippets</swagger.snippetOutput.dir>
                <generated.asciidoc.directory>${project.build.directory}/asciidoc/generated</generated.asciidoc.directory>
                <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
                <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>

                <swagger.input>${swagger.output.dir}/swagger.json</swagger.input>

                <springfox.version>2.9.2</springfox.version>

                <maven.test.skip>false</maven.test.skip>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>${maven.compiler.version}</version>
                        <configuration>
                            <compilerVersion>${java.version}</compilerVersion>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <encoding>UTF-8</encoding>
                            <!-- prevents endPosTable exception for maven compile -->
                            <useIncrementalCompilation>false</useIncrementalCompilation>
                        </configuration>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <io.springfox.staticdocs.outputDir>${swagger.output.dir}</io.springfox.staticdocs.outputDir>
                                <io.springfox.staticdocs.snippetsOutputDir>${swagger.snippetOutput.dir}</io.springfox.staticdocs.snippetsOutputDir>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>

                    <!-- First, use the swagger2markup plugin to generate asciidoc -->
                    <plugin>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-maven-plugin</artifactId>
                        <version>${swagger2markup.version}</version>
						
                        <configuration>
                            <swaggerInput>${swagger.input}</swaggerInput>
                            <outputDir>${generated.asciidoc.directory}</outputDir>
                            <config>
                                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>

                                <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
                                <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
                                <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
                                <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security/</swagger2markup.extensions.dynamicSecurity.contentPath>

                                <swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}</swagger2markup.extensions.springRestDocs.snippetBaseUri>
                                <swagger2markup.extensions.springRestDocs.defaultSnippets>true</swagger2markup.extensions.springRestDocs.defaultSnippets>
                            </config>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>convertSwagger2markup</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Run the generated asciidoc through Asciidoctor to generate
                         other documentation types, such as PDFs or HTML5 -->
                    <plugin>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctor-maven-plugin</artifactId>
                        <version>2.1.0</version>
                        <!-- Include Asciidoctor PDF for pdf generation -->
						<dependencies>
				<dependency>
                    <groupId>org.asciidoctor</groupId>
                    <artifactId>asciidoctorj-pdf</artifactId>
                    <version>1.5.0</version>
                </dependency>
          </dependencies>
                        <!-- Configure generic document generation settings -->
                        <configuration>
                            <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                            <sourceDocumentName>index.adoc</sourceDocumentName>
                            <attributes>
                                <doctype>book</doctype>
                                <toc>left</toc>
                                <toclevels>3</toclevels>
                                <numbered></numbered>
                                <hardbreaks></hardbreaks>
                                <sectlinks></sectlinks>
                                <sectanchors></sectanchors>
                                <generated>${generated.asciidoc.directory}</generated>
                            </attributes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>output-pdf</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>process-asciidoc</goal>
                                </goals>
                                <configuration>
                                    <backend>pdf</backend>
                                    <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- copy dependencies to the lib directory -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.1.1</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- copy the generated documents -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${asciidoctor.html.output.directory}</directory>
                                        </resource>
                                        <resource>
                                            <directory>${asciidoctor.pdf.output.directory}</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

        </profile>

    </profiles>
</project>
